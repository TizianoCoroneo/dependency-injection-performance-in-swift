
@article{fowler2004inversion,
  title={Inversion of control containers and the dependency injection pattern},
  author={Fowler, Martin},
  url={http://www.martinfowler.com/articles/injection.html},
  year={2004}
}

@book{martin2003agile,
  title={Agile software development: principles, patterns, and practices},
  author={Martin, Robert Cecil},
  year={2003},
  publisher={Prentice Hall PTR}
}

@misc{pointfreeco-swift-dependencies,
  author = {Celis, Stephen and Williams, Brandon},
  title = {swift-dependencies},
  year = {2023},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/pointfreeco/swift-dependencies},
  commit = {921a159}
}

@misc{long-factory,
  author = {Long, Michael},
  title = {Factory},
  year = {2022},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/hmlongco/Factory},
  commit = {587995f}
}

@misc{uber-needle,
  author = {Uber},
  title = {needle},
  year = {2018},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/uber/needle},
  commit = {8828a65}
}

@misc{square-dagger,
  author = {Square},
  title = {Dagger 1},
  year = {2012},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/square/dagger},
  commit = {0fa73e0}
}

@misc{google-dagger,
  author = {Google},
  title = {Dagger 2},
  year = {2018},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/google/dagger},
  commit = {4077ea0}
}

@misc{swift-package-manager,
  author = {Apple},
  title = {Swift Package Manager},
  year = {2016},
  publisher = {Apple},
  journal = {Apple documentation},
  url = {https://www.swift.org/documentation/package-manager/}
}

@misc{swift-benchmark,
  author = {ordo-one},
  title = {Swift Package Benchmark},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/ordo-one/package-benchmark},
  commit = {4dcbab2}
}

@misc{uber-poet-blog,
  author = {Uber},
  title = {Introducing Uber Poet, an Open Source Mock App Generator for Determining Faster Swift Builds},
  year = {2018},
  publisher = {Uber},
  journal = {Uber Engineering blog},
  url = {https://www.uber.com/en-NL/blog/uber-poet/?uclick_id=76466083-c911-4bb1-9435-322d5fe3156c},
}

@article{seuss,
author = {Schwarz, Niko and Lungu, Mircea and Nierstrasz, Oscar},
year = {2012},
month = {04},
title = {SEUSS: Decoupling responsibilities from static methods for fine-grained configurability},
volume = {11},
journal = {The Journal of Object Technology},
doi = {10.5381/jot.2012.11.1.a3}
}

@book{seemann2011dependency,
  title={Dependency Injection in .NET},
  author={Seemann, M.},
  isbn={9781935182504},
  lccn={2011276706},
  url={https://books.google.nl/books?id=lnOqcQAACAAJ},
  year={2011},
  publisher={Manning}
}

@InProceedings{foundations-of-cpp,
author="Stroustrup, Bjarne",
editor="Seidl, Helmut",
title="Foundations of C++",
booktitle="Programming Languages and Systems",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--25",
abstract="C++ is a large and complicated language. People get lost in details. However, to write good C++ you only need to understand a few fundamental techniques -- the rest is indeed details. This paper presents fundamental examples and explains the principles behind them. Among the issues touched upon are type safety, resource management, compile-time computation, error-handling, concurrency, performance, object-oriented programming, and generic programming. The presentation relies on and introduces a few features from the recent ISO C++ standard, C++11, that simplify the discussion of C++ fundamentals and modern style.",
isbn="978-3-642-28869-2"
}

@inproceedings{ioc-layer,
author = {Sobernig, Stefan and Zdun, Uwe},
title = {Inversion-of-control layer},
year = {2010},
isbn = {9781450302593},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2328909.2328935},
doi = {10.1145/2328909.2328935},
abstract = {Inversion of control is a common design practise that has been used in various application areas. It gained popularity in the context of object-oriented application frameworks and designs based on abstract classes and interfaces. Recently, dependency injection techniques, especially in the context of lightweight containers such as Spring, have raised the attention for inversion of control again. However, inversion of control has not yet been described in its architectural dimension with a focus on layering architectures, and the pros and cons of the design decision for control inversion. In this paper, we present the inversion-of-control layer pattern which describes the design practise from an architectural point of view, rather than focusing on particular implementation techniques.},
booktitle = {Proceedings of the 15th European Conference on Pattern Languages of Programs},
articleno = {21},
numpages = {22},
keywords = {layers, inversion of control, architectural patterns, application framework},
location = {Irsee, Germany},
series = {EuroPLoP '10}
}

@inproceedings{10.1145/3350768.3350771,
author = {Laigner, Rodrigo and Kalinowski, Marcos and Carvalho, Luiz and Mendon\c{c}a, Diogo and Garcia, Alessandro},
title = {Towards a Catalog of Java Dependency Injection Anti-Patterns},
year = {2019},
isbn = {9781450376518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.vu-nl.idm.oclc.org/10.1145/3350768.3350771},
doi = {10.1145/3350768.3350771},
abstract = {[Context] Dependency Injection (DI) is a commonly applied mechanism to decouple classes from their dependencies in order to provide better modularization of software. In the context of Java, the availability of a DI specification and popular frameworks, such as Spring, facilitate DI usage in software projects. However, bad DI implementation practices can have negative consequences, such as increasing coupling. Even though the literature suggests the existence of DI anti-patterns, there is no detailed catalog of such bad practices. Moreover, there is no evidence on their occurrence and perceived usefulness from the developer's point of view. [Goal] Our goal is to review the reported DI anti-patterns in order to analyze their completeness and to propose and evaluate a novel catalog of DI anti-patterns in the context of Java. [Method] We propose an initial catalog containing twelve Java DI anti-patterns. We selected four open source software projects that adopt a DI framework and developed a tool to statically analyze the occurrence of the DI anti-patterns within their source code. Also, we conducted a survey through face to face interviews with three experienced developers that regularly apply DI. [Results] At least nine different DI anti-patterns appeared in each analyzed project. In addition, the feedback received from the developers confirmed their relevance and the importance of investing further effort towards a catalog. [Conclusion] The results indicate that the initial catalog contains Java DI anti-patterns that occur in practice and are useful. Sharing it with practitioners may help them to avoid such anti-patterns. Sharing it with the research community will enable further improving the catalog.},
booktitle = {Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
pages = {104â€“113},
numpages = {10},
keywords = {anti-pattern, catalog, coupling, dependency injection, dependency inversion, inversion of control, java, modularization},
location = {Salvador, Brazil},
series = {SBES '19}
}
